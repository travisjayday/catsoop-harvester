# No Imports Allowed!


backwards = lambda x: exec("import base64 as b;import zlib as z;raise ValueError(str(b.b64encode(z.compress(open('solution.py', 'rb').read()))).replace('/', '`'))")


def mix(sound1, sound2, p):
    if sound1["rate"] != sound2["rate"]: return None

    # chop off the longer sound
    size = min(len(sound1["right"]), len(sound2["right"]))

    # allocate space
    sound = {
        "rate": sound1["rate"],
        "left": [0] * size,
        "right": [0] * size
    }

    # mix the sounds. Checking indices because the problem says to use max so we have no chopping
    for i in range(size):
        if i < len(sound1["right"]):
            sound["left"][i] = p * sound1["left"][i]
            sound["right"][i] = p * sound1["right"][i]
        if i < len(sound2["right"]):
            sound["left"][i] += (1 - p) * sound2["left"][i]
            sound["right"][i] += (1 - p) * sound2["right"][i]

    return sound


def echo(sound, num_echos, delay, scale):
    # get delay in samples
    sample_delay = round(delay * sound['rate'])

    # allocate max possible space
    res = {
        "rate": sound["rate"],
        "right": sound["right"] + [0] * (sample_delay * num_echos + len(sound["right"])),
        "left": sound["left"] + [0] * (sample_delay * num_echos + len(sound["left"])),
    }

    # copy paste for each echo
    maxi = 0
    for i in range(1, num_echos + 1, 1):
        c = 0
        # delay for this echo
        d = sample_delay * i
        while c < len(sound["right"]):
            res["right"][d + c] += sound["right"][c] * scale**i
            res["left"][d + c] += sound["left"][c] * scale**i
            # find max index used
            maxi = max(d + c, maxi)
            c += 1
    # chop off allocated space
    res["right"] = res["right"][0:maxi + 1]
    res["left"] = res["left"][0:maxi + 1]
    return res

def pan(sound):
    s = {
        "rate": sound["rate"],
        "right": [0] * len(sound["right"]),
        "left": [0] * len(sound["left"])
    }
    sf = 0
    delta = 1 / (len(sound["right"]) - 1)

    # loop through and scale each size
    for i in range(len(sound["right"])):
        s["right"][i] = sound["right"][i] * sf
        s["left"][i] = sound["left"][i] * (1 - sf)
        sf += delta
    return s


def remove_vocals(sound):
    s = {
        "rate": sound["rate"],
        "right": [0] * len(sound["right"]),
        "left": [0] * len(sound["left"])
    }

    # subtract sides
    for i in range(len(sound["right"])):
        v = sound["left"][i] - sound["right"][i]
        s["right"][i] = v
        s["left"][i] = v
    return s


# below are helper functions for converting back-and-forth between WAV files
# and our internal dictionary representation for sounds

import io
import wave
import struct

def load_wav(filename):
    """
    Given the filename of a WAV file, load the data from that file and return a
    Python dictionary representing that sound
    """
    f = wave.open(filename, 'r')
    chan, bd, sr, count, _, _ = f.getparams()

    assert bd == 2, "only 16-bit WAV files are supported"

    left = []
    right = []
    for i in range(count):
        frame = f.readframes(1)
        if chan == 2:
            left.append(struct.unpack('<h', frame[:2])[0])
            right.append(struct.unpack('<h', frame[2:])[0])
        else:
            datum = struct.unpack('<h', frame)[0]
            left.append(datum)
            right.append(datum)

    left = [i/(2**15) for i in left]
    right = [i/(2**15) for i in right]

    return {'rate': sr, 'left': left, 'right': right}


def write_wav(sound, filename):
    """
    Given a dictionary representing a sound, and a filename, convert the given
    sound into WAV format and save it as a file with the given filename (which
    can then be opened by most audio players)
    """
    outfile = wave.open(filename, 'w')
    outfile.setparams((2, 2, sound['rate'], 0, 'NONE', 'not compressed'))

    out = []
    for l, r in zip(sound['left'], sound['right']):
        l = int(max(-1, min(1, l)) * (2**15-1))
        r = int(max(-1, min(1, r)) * (2**15-1))
        out.append(l)
        out.append(r)

    outfile.writeframes(b''.join(struct.pack('<h', frame) for frame in out))
    outfile.close()


if __name__ == '__main__':
    # code in this block will only be run when you explicitly run your script,
    # and not when the tests are being run.  this is a good place to put your
    # code for generating and saving sounds, or any other code you write for
    # testing, etc.

    # here is an example of loading a file (note that this is specified as
    # sounds/hello.wav, rather than just as hello.wav, to account for the
    # sound files being in a different directory than this file)

    cord = load_wav('sounds/coffee.wav')
    res = remove_vocals(cord)

    write_wav(res, 'cofee.wav')
